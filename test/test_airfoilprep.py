import unittest
import numpy as np
from math import pi

from airfoilprep import Polar, Airfoil, AirfoilAnalysis


class TestBlend(unittest.TestCase):

    def setUp(self):
        alpha = [-3.04, -2.03, -1.01, 0.01, 1.03, 2.05, 3.07, 4.09, 5.11,
                 6.13, 7.14, 8.16, 9.17, 10.18, 11.18, 12.19, 13.18,
                 14.18, 15.18, 16.17, 17.14, 18.06, 19.06, 20.07, 25]
        cl = [-0.071, 0.044, 0.144, 0.241, 0.338, 0.435, 0.535, 0.632,
              0.728, 0.813, 0.883, 0.946, 1.001, 1.054, 1.056, 1.095,
              1.138, 1.114, 1.073, 1.008, 0.95, 0.902, 0.795, 0.797, 0.8]
        cd = [0.0122, 0.0106, 0.0114, 0.0134, 0.0136, 0.014, 0.0147,
              0.0156, 0.0162, 0.0173, 0.0191, 0.0215, 0.0248, 0.0339,
              0.0544, 0.0452, 0.0445, 0.067, 0.0748, 0.1028, 0.1473,
              0.2819, 0.2819, 0.2819, 0.3]
        cm = [-0.0044, -0.0051, 0.0018, -0.0216, -0.0282, -0.0346, -0.0405,
              -0.0455, -0.0507, -0.0404, -0.0321, -0.0281, -0.0284, -0.0322,
              -0.0361, -0.0363, -0.0393, -0.0398, -0.0983, -0.1242, -0.1155,
              -0.1068, -0.0981, -0.0894, -0.0807]
        Re = 1

        self.polar1 = Polar(Re, alpha, cl, cd, cm)

        alpha = [-3.04, -2.03, -1.01, 0.01, 1.03, 2.05, 3.07, 4.09, 5.11,
                 6.13, 7.14, 8.16, 9.17, 10.18, 11.18, 12.19, 13.18, 14.18,
                 15.189, 16.17, 17.14, 18.06, 19.06, 20.07, 21.08, 22.09,
                 23.1, 25]
        cl = [-0.0852, 0.0528, 0.1728, 0.2892, 0.4056, 0.522, 0.642, 0.7584,
              0.8736, 0.9756, 1.0596, 1.1352, 1.2012, 1.2648, 1.2672, 1.314,
              1.3656, 1.3368, 1.2876, 1.2096, 1.14, 1.0824, 0.954, 0.9564, 1,
              1.2, 1.4, 1.6]
        cd = [0.01464, 0.01272, 0.01368, 0.01608, 0.01632, 0.0168, 0.01764,
              0.01872, 0.01944, 0.02076, 0.02292, 0.0258, 0.02976, 0.04068,
              0.06528, 0.05424, 0.0534, 0.0804, 0.08976, 0.12336, 0.17676,
              0.33828, 0.33828, 0.33828, 0.35, 0.4, 0.45, 0.5]
        cm = [-0.0037, -0.0044, -0.0051, 0.0018, -0.0216, -0.0282, -0.0346,
              -0.0405, -0.0455, -0.0507, -0.0404, -0.0321, -0.0281, -0.0284,
              -0.0322, -0.0361, -0.0363, -0.0393, -0.0398, -0.0983, -0.1242,
              -0.1155, -0.1068, -0.0981, -0.0894, -0.0807, -0.072, -0.0633]

        self.polar2 = Polar(Re, alpha, cl, cd, cm)


    def test_blend1(self):

        polar3 = self.polar1.blend(self.polar2, 0.5)

        alpha_blend = [-3.04, -2.03, -1.01, 0.01, 1.03, 2.05, 3.07, 4.09,
                       5.11, 6.13, 7.14, 8.16, 9.17, 10.18, 11.18, 12.19,
                       13.18, 14.18, 15.18, 16.17, 17.14, 18.06, 19.06, 20.07,
                       25]
        cl_blend = [-0.078, 0.048, 0.158, 0.265, 0.372, 0.479, 0.589, 0.695,
                    0.801, 0.894, 0.971, 1.041, 1.101, 1.159, 1.162, 1.205,
                    1.252, 1.225, 1.181, 1.109, 1.045, 0.992, 0.875, 0.877,
                    1.200]
        cd_blend = [0.0134, 0.0117, 0.0125, 0.0147, 0.0150, 0.0154, 0.0162,
                    0.0172, 0.0178, 0.0190, 0.0210, 0.0237, 0.0273, 0.0373,
                    0.0598, 0.0497, 0.0490, 0.0737, 0.0822, 0.1131, 0.1620,
                    0.3101, 0.3101, 0.3101, 0.4000]
        cm_blend = [-0.00405, -0.00475, -0.00165, -0.0099, -0.0249, -0.0314,
                    -0.03755, -0.043, -0.0481, -0.04555, -0.03625, -0.0301,
                    -0.02825, -0.0303, -0.03415, -0.0362, -0.0378, -0.03955,
                    -0.06905, -0.11125, -0.11985, -0.11115,-0.10245, -0.09375,
                    -0.072]

        # re-interpolate b/c angles of attack are different
        cl3 = np.interp(alpha_blend, polar3.alpha, polar3.cl)
        cd3 = np.interp(alpha_blend, polar3.alpha, polar3.cd)
        cm3 = np.interp(alpha_blend, polar3.alpha, polar3.cm)

        # should be within 1e-3
        np.testing.assert_allclose(cl3, cl_blend, atol=1e-3)
        np.testing.assert_allclose(cd3, cd_blend, atol=1e-3)
        np.testing.assert_allclose(cm3, cm_blend, atol=1e-3)

    def test_blend1_w_airfoil(self):

        af1 = Airfoil([self.polar1])
        af2 = Airfoil([self.polar2])
        af3 = af1.blend(af2, 0.5)
        polar3 = af3.polars[0]  # kind of bad practice for me to be accessing this

        alpha_blend = [-3.04, -2.03, -1.01, 0.01, 1.03, 2.05, 3.07, 4.09,
                       5.11, 6.13, 7.14, 8.16, 9.17, 10.18, 11.18, 12.19,
                       13.18, 14.18, 15.18, 16.17, 17.14, 18.06, 19.06, 20.07,
                       25]
        cl_blend = [-0.078, 0.048, 0.158, 0.265, 0.372, 0.479, 0.589, 0.695,
                    0.801, 0.894, 0.971, 1.041, 1.101, 1.159, 1.162, 1.205,
                    1.252, 1.225, 1.181, 1.109, 1.045, 0.992, 0.875, 0.877,
                    1.200]
        cd_blend = [0.0134, 0.0117, 0.0125, 0.0147, 0.0150, 0.0154, 0.0162,
                    0.0172, 0.0178, 0.0190, 0.0210, 0.0237, 0.0273, 0.0373,
                    0.0598, 0.0497, 0.0490, 0.0737, 0.0822, 0.1131, 0.1620,
                    0.3101, 0.3101, 0.3101, 0.4000]
        cm_blend = [-0.00405, -0.00475, -0.00165, -0.0099, -0.0249, -0.0314,
                    -0.03755, -0.043, -0.0481, -0.04555, -0.03625, -0.0301,
                    -0.02825, -0.0303, -0.03415, -0.0362, -0.0378, -0.03955,
                    -0.06905, -0.11125, -0.11985, -0.11115,-0.10245, -0.09375,
                    -0.072]

        # re-interpolate b/c angles of attack are different
        cl3 = np.interp(alpha_blend, polar3.alpha, polar3.cl)
        cd3 = np.interp(alpha_blend, polar3.alpha, polar3.cd)
        cm3 = np.interp(alpha_blend, polar3.alpha, polar3.cm)

        # should be within 1e-3
        np.testing.assert_allclose(cl3, cl_blend, atol=1e-3)
        np.testing.assert_allclose(cd3, cd_blend, atol=1e-3)
        np.testing.assert_allclose(cm3, cm_blend, atol=1e-3)

    def test_blend2(self):

        polar3 = self.polar1.blend(self.polar2, 0.7)

        alpha_blend = [-3.04, -2.03, -1.01, 0.01, 1.03, 2.05, 3.07, 4.09, 5.11,
                       6.13, 7.14, 8.16, 9.17, 10.18, 11.18, 12.19, 13.18,
                       14.18, 15.18, 16.17, 17.14, 18.06, 19.06, 20.07, 25]
        cl_blend = [-0.081, 0.050, 0.164, 0.275, 0.385, 0.496, 0.610, 0.720,
                    0.830, 0.927, 1.007, 1.078, 1.141, 1.202, 1.204, 1.248,
                    1.297, 1.270, 1.224, 1.149, 1.083, 1.028, 0.906, 0.909,
                    1.360]
        cd_blend = [0.0139, 0.0121, 0.0130, 0.0153, 0.0155, 0.0160, 0.0168,
                    0.0178, 0.0185, 0.0197, 0.0218, 0.0245, 0.0283, 0.0386,
                    0.0620, 0.0515, 0.0507, 0.0764, 0.0852, 0.1172, 0.1679,
                    0.3214, 0.3214, 0.3214, 0.4400]
        cm_blend = [-0.00391, -0.00461, -0.00303, -0.00522, -0.02358,
                    -0.03012, -0.03637, -0.042, -0.04706, -0.04761,
                    -0.03791, -0.0309, -0.02819, -0.02954, -0.03337,
                    -0.03616, -0.0372, -0.03945, -0.057347, -0.10607,
                    -0.12159, -0.11289, -0.10419, -0.09549, -0.06852]

        # re-interpolate b/c angles of attack are different
        cl3 = np.interp(alpha_blend, polar3.alpha, polar3.cl)
        cd3 = np.interp(alpha_blend, polar3.alpha, polar3.cd)
        cm3 = np.interp(alpha_blend, polar3.alpha, polar3.cm)

        # should be within 1e-3
        np.testing.assert_allclose(cl3, cl_blend, atol=1e-3)
        np.testing.assert_allclose(cd3, cd_blend, atol=1e-3)
        np.testing.assert_allclose(cm3, cm_blend, atol=1e-3)

    def test_blend3(self):

        polar3 = self.polar1.blend(self.polar2, 0.2)

        alpha_blend = [-3.04, -2.03, -1.01, 0.01, 1.03, 2.05, 3.07, 4.09, 5.11,
                       6.13, 7.14, 8.16, 9.17, 10.18, 11.18, 12.19, 13.18,
                       14.18, 15.18, 16.17, 17.14, 18.06, 19.06, 20.07, 25]
        cl_blend = [-0.074, 0.046, 0.150, 0.251, 0.352, 0.452, 0.556, 0.657,
                    0.757, 0.846, 0.918, 0.984, 1.041, 1.096, 1.098, 1.139,
                    1.184, 1.159, 1.116, 1.048, 0.988, 0.938, 0.827, 0.829,
                    0.960]
        cd_blend = [0.0127, 0.0110, 0.0119, 0.0139, 0.0141, 0.0146, 0.0153,
                    0.0162, 0.0168, 0.0180, 0.0199, 0.0224, 0.0258, 0.0353,
                    0.0566, 0.0470, 0.0463, 0.0697, 0.0778, 0.1069, 0.1532,
                    0.2932, 0.2932, 0.2932, 0.3400]
        cm_blend = [-0.00426, -0.00496, 0.00042, -0.01692, -0.02688,
                    -0.03332, -0.03932, -0.0445, -0.04966, -0.04246,
                    -0.03376, -0.0289, -0.02834, -0.03144, -0.03532,
                    -0.03626, -0.0387, -0.0397, -0.0866, -0.11902,
                    -0.11724, -0.10854, -0.09984, -0.09114, -0.07722]

        # re-interpolate b/c angles of attack are different
        cl3 = np.interp(alpha_blend, polar3.alpha, polar3.cl)
        cd3 = np.interp(alpha_blend, polar3.alpha, polar3.cd)
        cm3 = np.interp(alpha_blend, polar3.alpha, polar3.cm)

        # should be within 1e-3
        np.testing.assert_allclose(cl3, cl_blend, atol=1e-3)
        np.testing.assert_allclose(cd3, cd_blend, atol=1e-3)
        np.testing.assert_allclose(cm3, cm_blend, atol=1e-3)


class Test3DStall(unittest.TestCase):

    def setUp(self):
        alpha = [-9.000, -8.000, -7.000, -6.000, -5.000, -4.000, -3.000,
                 -2.000, -1.000, 0.000, 1.000, 2.000, 3.000, 4.000, 5.000,
                 6.000, 7.000, 8.000, 9.000, 10.000, 11.000, 12.000, 13.000,
                 14.000, 15.000, 16.000, 17.000, 18.000, 19.000, 20.000,
                 30.000, 40.000, 50.000]
        cl = [-0.802, -0.721, -0.611, -0.506, -0.408, -0.313, -0.220, -0.133,
              -0.060, 0.036, 0.227, 0.342, 0.436, 0.556, 0.692, 0.715, 0.761,
              0.830, 0.893, 0.954, 1.013, 1.042, 1.061, 1.083, 1.078, 0.882,
              0.811, 0.793, 0.793, 0.798, 0.772, 0.757, 0.700]
        cd = [0.027, 0.025, 0.024, 0.023, 0.022, 0.022, 0.023, 0.025, 0.027,
              0.028, 0.024, 0.019, 0.017, 0.015, 0.017, 0.019, 0.021, 0.024,
              0.027, 0.031, 0.037, 0.046, 0.058, 0.074, 0.088, 0.101, 0.114,
              0.128, 0.142, 0.155, 0.321, 0.525, 0.742]
        cm = [-0.0037, -0.0044, -0.0051, 0.0018, -0.0216, -0.0282, -0.0346,
              -0.0405, -0.0455, -0.0507, -0.0404, -0.0321, -0.0281, -0.0284,
              -0.0322, -0.0361, -0.0363, -0.0393, -0.0398, -0.0983, -0.1242,
              -0.1155, -0.1068, -0.0981, -0.0894, -0.0807, -0.072, -0.0633,
              -0.054, -0.045, -0.036, -0.22, -0.13]
        cm_zeros = np.zeros(len(cm))
        Re = 1

        self.polar = Polar(Re, alpha, cl, cd, cm)
        self.polar2 = Polar(Re, alpha, cl, cd, cm_zeros)


    def test_stall1(self):
        R = 2.4
        r = 0.25*R
        chord = 0.18
        Omega = 200*pi/30
        Uinf = 10.0
        tsr = Omega*R/Uinf

        newpolar = self.polar.correction3D(r/R, chord/r, tsr,
                                           alpha_max_corr=30,
                                           alpha_linear_min=-4,
                                           alpha_linear_max=4)

        cl_3d = [-0.8466, -0.7523, -0.6420, -0.5342, -0.4302, -0.3284,
                 -0.2276, -0.1303, -0.0404, 0.0618, 0.2191, 0.3321, 0.4336,
                 0.5501, 0.6755, 0.7363, 0.8101, 0.8973, 0.9810, 1.0640,
                 1.1450, 1.2098, 1.2682, 1.3281, 1.3731, 1.3088, 1.3159,
                 1.3534, 1.4010, 1.4515, 1.9140, 1.8857, 1.6451]
        cd_3d = [0.0399, 0.0334, 0.0316, 0.0293, 0.0269, 0.0254, 0.0246,
                 0.0246, 0.0246, 0.0252, 0.0249, 0.0200, 0.0167, 0.0157,
                 0.0174, 0.0183, 0.0212, 0.0255, 0.0303, 0.0367, 0.0465,
                 0.0615, 0.0800, 0.1047, 0.1301, 0.1695, 0.2047, 0.2384,
                 0.2728, 0.3081, 0.8097, 1.2625, 1.6280]

        # test equality
        np.testing.assert_allclose(newpolar.cl, cl_3d, atol=1e-3)
        np.testing.assert_allclose(newpolar.cd, cd_3d, atol=1e-3)


    def test_stall1_w_airfoil(self):
        R = 2.4
        r = 0.25*R
        chord = 0.18
        Omega = 200*pi/30
        Uinf = 10.0
        tsr = Omega*R/Uinf

        af = Airfoil([self.polar])
        newaf = af.correction3D(r/R, chord/r, tsr,
                                alpha_max_corr=30,
                                alpha_linear_min=-4,
                                alpha_linear_max=4)
        _, _, cl_grid, cd_grid, cm_grid = newaf.createDataGrid()

        newpolar = newaf.polars[0]

        cl_3d = [-0.8466, -0.7523, -0.6420, -0.5342, -0.4302, -0.3284,
                 -0.2276, -0.1303, -0.0404, 0.0618, 0.2191, 0.3321, 0.4336,
                 0.5501, 0.6755, 0.7363, 0.8101, 0.8973, 0.9810, 1.0640,
                 1.1450, 1.2098, 1.2682, 1.3281, 1.3731, 1.3088, 1.3159,
                 1.3534, 1.4010, 1.4515, 1.9140, 1.8857, 1.6451]
        cd_3d = [0.0399, 0.0334, 0.0316, 0.0293, 0.0269, 0.0254, 0.0246,
                 0.0246, 0.0246, 0.0252, 0.0249, 0.0200, 0.0167, 0.0157,
                 0.0174, 0.0183, 0.0212, 0.0255, 0.0303, 0.0367, 0.0465,
                 0.0615, 0.0800, 0.1047, 0.1301, 0.1695, 0.2047, 0.2384,
                 0.2728, 0.3081, 0.8097, 1.2625, 1.6280]
        cm_test = [[-0.0037], [-0.0044], [-0.0051], [0.0018], [-0.0216], [-0.0282],
                   [-0.0346], [-0.0405], [-0.0455], [-0.0507], [-0.0404], [-0.0321],
                   [-0.0281], [-0.0284], [-0.0322], [-0.0361], [-0.0363], [-0.0393],
                   [-0.0398], [-0.0983], [-0.1242], [-0.1155], [-0.1068], [-0.0981],
                   [-0.0894], [-0.0807], [-0.072], [-0.0633], [-0.054], [-0.045],
                   [-0.036], [-0.22], [-0.13]]

        # test equality
        np.testing.assert_allclose(newpolar.cl, cl_3d, atol=1e-3)
        np.testing.assert_allclose(newpolar.cd, cd_3d, atol=1e-3)
        np.testing.assert_allclose(cm_grid, cm_test, atol=1e-3)


    def test_stall2(self):
        R = 2.4
        r = 0.75*R
        chord = 0.28
        Omega = 200*pi/30
        Uinf = 14.0
        tsr = Omega*R/Uinf

        newpolar = self.polar.correction3D(r/R, chord/r, tsr,
                                           alpha_max_corr=30,
                                           alpha_linear_min=-4,
                                           alpha_linear_max=4)

        cl_3d = [-0.81340155, -0.72876051, -0.61903798, -0.51322348,
                 -0.41336822, -0.31696485, -0.22214149, -0.13269893,
                 -0.05485453, 0.04222704, 0.22525537, 0.33917483,
                 0.43518608, 0.55464051, 0.68785835, 0.72023796,
                 0.77302335, 0.84665343, 0.91485674, 0.98191931, 1.04592758,
                 1.08446883, 1.11313747, 1.14423161, 1.15194066, 0.98921407,
                 0.93776667, 0.93384528, 0.94558296, 0.96199091, 1.05910388,
                 1.04054486, 0.93735382]
        cd_3d = [0.03050922, 0.02712935, 0.02589588, 0.02453937, 0.02341344,
                 0.02320787, 0.02359745, 0.02497252, 0.02653913, 0.02751806,
                 0.02430795, 0.01935093, 0.01663156, 0.01552516, 0.01698944,
                 0.01853615, 0.02107760, 0.02443710, 0.02784230, 0.03217433,
                 0.03929881, 0.05021192, 0.06322801, 0.08159739, 0.09837902,
                 0.11798276, 0.13692472, 0.15565820, 0.17470667, 0.19368328,
                 0.44408310, 0.71034295, 0.96437541]

        # test equality
        np.testing.assert_allclose(newpolar.cl, cl_3d, atol=1e-3)
        np.testing.assert_allclose(newpolar.cd, cd_3d, atol=1e-3)


    def test_stall3(self):
        R = 5.0
        r = 0.5*R
        chord = 0.5
        Omega = 100*pi/30
        Uinf = 10.0
        tsr = Omega*R/Uinf

        newpolar = self.polar.correction3D(r/R, chord/r, tsr,
                                           alpha_max_corr=30,
                                           alpha_linear_min=-4,
                                           alpha_linear_max=4)

        cl_3d = [-0.8240, -0.7363, -0.6264, -0.5199, -0.4188, -0.3206, -0.2239,
                 -0.1319, -0.0502, 0.0485, 0.2233, 0.3369, 0.4347, 0.5532,
                 0.6839, 0.7254, 0.7849, 0.8629, 0.9361, 1.0082, 1.0777,
                 1.1246, 1.1628, 1.2031, 1.2228, 1.0916, 1.0589, 1.0682,
                 1.0914, 1.1188, 1.3329, 1.3112, 1.1640]
        cd_3d = [0.0335, 0.0291, 0.0277, 0.0261, 0.0245, 0.0239, 0.0239,
                 0.0249, 0.0259, 0.0268, 0.0245, 0.0195, 0.0167, 0.0156,
                 0.0171, 0.0185, 0.0211, 0.0248, 0.0286, 0.0336, 0.0416,
                 0.0538, 0.0686, 0.0890, 0.1085, 0.1345, 0.1586, 0.1822,
                 0.2061, 0.2303, 0.5612, 0.8872, 1.1769]

        # test equality
        np.testing.assert_allclose(newpolar.cl, cl_3d, atol=1e-3)
        np.testing.assert_allclose(newpolar.cd, cd_3d, atol=1e-3)

    def test_stall4_cm(self):
        R = 5.0
        r = 0.5*R
        chord = 0.5
        Omega = 100*pi/30
        Uinf = 10.0
        tsr = Omega*R/Uinf

        newpolar = self.polar2.correction3D(r/R, chord/r, tsr,
                                           alpha_max_corr=30,
                                           alpha_linear_min=-4,
                                           alpha_linear_max=4)

        cl_3d = [-0.8240, -0.7363, -0.6264, -0.5199, -0.4188, -0.3206, -0.2239,
                 -0.1319, -0.0502, 0.0485, 0.2233, 0.3369, 0.4347, 0.5532,
                 0.6839, 0.7254, 0.7849, 0.8629, 0.9361, 1.0082, 1.0777,
                 1.1246, 1.1628, 1.2031, 1.2228, 1.0916, 1.0589, 1.0682,
                 1.0914, 1.1188, 1.3329, 1.3112, 1.1640]
        cd_3d = [0.0335, 0.0291, 0.0277, 0.0261, 0.0245, 0.0239, 0.0239,
                 0.0249, 0.0259, 0.0268, 0.0245, 0.0195, 0.0167, 0.0156,
                 0.0171, 0.0185, 0.0211, 0.0248, 0.0286, 0.0336, 0.0416,
                 0.0538, 0.0686, 0.0890, 0.1085, 0.1345, 0.1586, 0.1822,
                 0.2061, 0.2303, 0.5612, 0.8872, 1.1769]
        # cm = [-0.0037, -0.0044, -0.0051, 0.0018, -0.0216, -0.0282, -0.0346,
        #       -0.0405, -0.0455, -0.0507, -0.0404, -0.0321, -0.0281, -0.0284,
        #       -0.0322, -0.0361, -0.0363, -0.0393, -0.0398, -0.0983, -0.1242,
        #       -0.1155, -0.1068, -0.0981, -0.0894, -0.0807, -0.072, -0.0633,
        #       -0.054, -0.045, -0.036, -0.22, -0.13]
        cm_zeros = np.zeros(len(cd_3d))

        # test equality
        np.testing.assert_allclose(newpolar.cl, cl_3d, atol=1e-3)
        np.testing.assert_allclose(newpolar.cd, cd_3d, atol=1e-3)
        np.testing.assert_allclose(newpolar.cm, cm_zeros, atol=1e-3)


class TestExtrap(unittest.TestCase):

    def setUp(self):

        alpha = [-10.1, -8.2, -6.1, -4.1, -2.1, 0.1, 2, 4.1, 6.2, 8.1, 10.2,
                 11.3, 12.1, 13.2, 14.2, 15.3, 16.3, 17.1, 18.1, 19.1, 20.1]
        cl = [-0.6300, -0.5600, -0.6400, -0.4200, -0.2100, 0.0500, 0.3000,
              0.5400, 0.7900, 0.9000, 0.9300, 0.9200, 0.9500, 0.9900, 1.0100,
              1.0200, 1.0000, 0.9400, 0.8500, 0.7000, 0.6600]
        cd = [0.0390, 0.0233, 0.0131, 0.0134, 0.0119, 0.0122, 0.0116, 0.0144,
              0.0146, 0.0162, 0.0274, 0.0303, 0.0369, 0.0509, 0.0648, 0.0776,
              0.0917, 0.0994, 0.2306, 0.3142, 0.3186]
        cm = [-0.0044, -0.0051, 0.0018, -0.0216, -0.0282, -0.0346, -0.0405,
              -0.0455, -0.0507, -0.0404, -0.0321, -0.0281, -0.0284, -0.0322,
              -0.0361, -0.0363, -0.0393, -0.0398, -0.0983, -0.1242, -0.1155]
        cm_zeros = np.zeros(len(cm))
        Re = 1
        self.polar = Polar(Re, alpha, cl, cd, cm)
        self.polar2 = Polar(Re, alpha, cl, cd, cm_zeros)


    def test_extrap1(self):

        cdmax = 1.29
        newpolar = self.polar.extrapolate(cdmax=cdmax)

        alpha_extrap = [-180, -170, -160, -150, -140, -130, -120, -110, -100,
                        -90, -80, -70, -60, -50, -40, -30, -20, -10.1, -8.2,
                        -6.1, -4.1, -2.1, 0.1, 2, 4.1, 6.2, 8.1, 10.2, 11.3,
                        12.1, 13.2, 14.2, 15.3, 16.3, 17.1, 18.1, 19.1, 20.1,
                        30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140,
                        150, 160, 170, 180]
        cl_extrap = [0.0000, 0.2299, 0.4597, 0.4907, 0.5053, 0.4805, 0.4102,
                     0.2985, 0.1565, 0.0000, -0.1565, -0.2985, -0.4102,
                     -0.4805, -0.5053, -0.4907, -0.4637, -0.6300, -0.5600,
                     -0.6400, -0.4200, -0.2100, 0.0500, 0.3000, 0.5400,
                     0.7900, 0.9000, 0.9300, 0.9200, 0.9500, 0.9900, 1.0100,
                     1.0200, 1.0000, 0.9400, 0.8500, 0.7000, 0.6600, 0.7010,
                     0.7219, 0.6864, 0.5860, 0.4264, 0.2235, 0.0000, -0.1565,
                     -0.2985, -0.4102, -0.4805, -0.5053, -0.4907, -0.4597,
                     -0.2299, 0.0000]
        cd_extrap = [0.1770, 0.2132, 0.3173, 0.4758, 0.6686, 0.8708, 1.0560,
                     1.1996, 1.2818, 1.2900, 1.2818, 1.1996, 1.0560, 0.8708,
                     0.6686, 0.4758, 0.3158, 0.0390, 0.0233, 0.0131, 0.0134,
                     0.0119, 0.0122, 0.0116, 0.0144, 0.0146, 0.0162, 0.0274,
                     0.0303, 0.0369, 0.0509, 0.0648, 0.0776, 0.0917, 0.0994,
                     0.2306, 0.3142, 0.3186, 0.4758, 0.6686, 0.8708, 1.0560,
                     1.1996, 1.2818, 1.2900, 1.2818, 1.1996, 1.0560, 0.8708,
                     0.6686, 0.4758, 0.3173, 0.2132, 0.1770]
        cm_extrap = [0.0000, 0.4000, 0.2431, 0.2568, 0.2865, 0.3185, 0.3458,
                     0.3632, 0.3672, 0.3559, 0.3443, 0.3182, 0.2808, 0.2362,
                     0.1886, 0.1414, 0.0942, -0.0044, -0.0051, 0.0018, -0.0216,
                     -0.0282, -0.0346, -0.0405, -0.0455, -0.0507, -0.0404, -0.0321,
                     -0.0281, -0.0284, -0.0322, -0.0361, -0.0363, -0.0393, -0.0398,
                     -0.0983, -0.1242, -0.1155, -0.1710, -0.2202, -0.2637, -0.3002,
                     -0.3284, -0.3471, -0.3559, -0.3672, -0.3632, -0.3458, -0.3185,
                     -0.2865, -0.2568, -0.2431, -0.5000, 0.0000]

        # re-interpolate b/c angles of attack are different
        cl = np.interp(alpha_extrap, newpolar.alpha, newpolar.cl)
        cd = np.interp(alpha_extrap, newpolar.alpha, newpolar.cd)
        cm = np.interp(alpha_extrap, newpolar.alpha, newpolar.cm)

        # test equality
        np.testing.assert_allclose(cl, cl_extrap, atol=1.5e-4)
        np.testing.assert_allclose(cd, cd_extrap, atol=1.5e-4)
        np.testing.assert_allclose(cm, cm_extrap, atol=5e-3)

    def test_extrap1_w_airfoil(self):

        cdmax = 1.29
        af = Airfoil([self.polar2])
        newaf = af.extrapolate(cdmax=cdmax)
        newpolar = newaf.polars[0]

        alpha_extrap = [-180, -170, -160, -150, -140, -130, -120, -110, -100,
                        -90, -80, -70, -60, -50, -40, -30, -20, -10.1, -8.2,
                        -6.1, -4.1, -2.1, 0.1, 2, 4.1, 6.2, 8.1, 10.2, 11.3,
                        12.1, 13.2, 14.2, 15.3, 16.3, 17.1, 18.1, 19.1, 20.1,
                        30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140,
                        150, 160, 170, 180]
        cl_extrap = [0.0000, 0.2299, 0.4597, 0.4907, 0.5053, 0.4805, 0.4102,
                     0.2985, 0.1565, 0.0000, -0.1565, -0.2985, -0.4102,
                     -0.4805, -0.5053, -0.4907, -0.4637, -0.6300, -0.5600,
                     -0.6400, -0.4200, -0.2100, 0.0500, 0.3000, 0.5400,
                     0.7900, 0.9000, 0.9300, 0.9200, 0.9500, 0.9900, 1.0100,
                     1.0200, 1.0000, 0.9400, 0.8500, 0.7000, 0.6600, 0.7010,
                     0.7219, 0.6864, 0.5860, 0.4264, 0.2235, 0.0000, -0.1565,
                     -0.2985, -0.4102, -0.4805, -0.5053, -0.4907, -0.4597,
                     -0.2299, 0.0000]
        cd_extrap = [0.1770, 0.2132, 0.3173, 0.4758, 0.6686, 0.8708, 1.0560,
                     1.1996, 1.2818, 1.2900, 1.2818, 1.1996, 1.0560, 0.8708,
                     0.6686, 0.4758, 0.3158, 0.0390, 0.0233, 0.0131, 0.0134,
                     0.0119, 0.0122, 0.0116, 0.0144, 0.0146, 0.0162, 0.0274,
                     0.0303, 0.0369, 0.0509, 0.0648, 0.0776, 0.0917, 0.0994,
                     0.2306, 0.3142, 0.3186, 0.4758, 0.6686, 0.8708, 1.0560,
                     1.1996, 1.2818, 1.2900, 1.2818, 1.1996, 1.0560, 0.8708,
                     0.6686, 0.4758, 0.3173, 0.2132, 0.1770]
        cm_extrap = np.linspace(0, 0, len(cd_extrap))

        # re-interpolate b/c angles of attack are different
        cl = np.interp(alpha_extrap, newpolar.alpha, newpolar.cl)
        cd = np.interp(alpha_extrap, newpolar.alpha, newpolar.cd)
        cm = np.interp(alpha_extrap, newpolar.alpha, newpolar.cm)

        # test equality
        np.testing.assert_allclose(cl, cl_extrap, atol=1.5e-4)
        np.testing.assert_allclose(cd, cd_extrap, atol=1.5e-4)
        np.testing.assert_allclose(cm, cm_extrap, atol=5e-3)


    def test_extrap2(self):

        cdmax = 1.0
        newpolar = self.polar.extrapolate(cdmax=cdmax)

        alpha_extrap = [-180, -170, -160, -150, -140, -130, -120, -110, -100,
                        -90, -80, -70, -60, -50, -40, -30, -20, -10.1, -8.2,
                        -6.1, -4.1, -2.1, 0.1, 2, 4.1, 6.2, 8.1, 10.2, 11.3,
                        12.1, 13.2, 14.2, 15.3, 16.3, 17.1, 18.1, 19.1, 20.1,
                        30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140,
                        150, 160, 170, 180]
        cl_extrap = [0.0000, 0.2299, 0.4597, 0.4411, 0.4287, 0.3943, 0.3297,
                     0.2364, 0.1225, 0.0000, -0.1225, -0.2364, -0.3297,
                     -0.3943, -0.4287, -0.4411, -0.4637, -0.6300, -0.5600,
                     -0.6400, -0.4200, -0.2100, 0.0500, 0.3000, 0.5400,
                     0.7900, 0.9000, 0.9300, 0.9200, 0.9500, 0.9900, 1.0100,
                     1.0200, 1.0000, 0.9400, 0.8500, 0.7000, 0.6600, 0.6302,
                     0.6124, 0.5633, 0.4710, 0.3378, 0.1750, 0.0000, -0.1225,
                     -0.2364, -0.3297, -0.3943, -0.4287, -0.4411, -0.4597,
                     -0.2299, 0.0000]
        cd_extrap = [0.2135, 0.2404, 0.3176, 0.4349, 0.5767, 0.7241, 0.8568,
                     0.9560, 1.0069, 1.0000, 1.0069, 0.9560, 0.8568, 0.7241,
                     0.5767, 0.4349, 0.3158, 0.0390, 0.0233, 0.0131, 0.0134,
                     0.0119, 0.0122, 0.0116, 0.0144, 0.0146, 0.0162, 0.0274,
                     0.0303, 0.0369, 0.0509, 0.0648, 0.0776, 0.0917, 0.0994,
                     0.2306, 0.3142, 0.3186, 0.4349, 0.5767, 0.7241, 0.8568,
                     0.9560, 1.0069, 1.0000, 1.0069, 0.9560, 0.8568, 0.7241,
                     0.5767, 0.4349, 0.3176, 0.2404, 0.2135]
        cm_extrap = [0.0000, 0.4000, 0.2432, 0.2354, 0.2500, 0.2695, 0.2864,
                     0.2961, 0.2956, 0.2834, 0.2776, 0.2603, 0.2337, 0.2013,
                     0.1663, 0.1310, 0.0942, -0.0044, -0.0051, 0.0018, -0.0216,
                     -0.0282, -0.0346, -0.0405, -0.0455, -0.0507, -0.0404, -0.0321,
                     -0.0281, -0.0284, -0.0322, -0.0361, -0.0363, -0.0393, -0.0398,
                     -0.0983, -0.1242, -0.1155, -0.1577, -0.1930, -0.2239, -0.2494,
                     -0.2683, -0.2798, -0.2834, -0.2956, -0.2961, -0.2864, -0.2695,
                     -0.2500, -0.2354, -0.2432, -0.5000, 0.0000]

        # re-interpolate b/c angles of attack are different
        cl = np.interp(alpha_extrap, newpolar.alpha, newpolar.cl)
        cd = np.interp(alpha_extrap, newpolar.alpha, newpolar.cd)
        cm = np.interp(alpha_extrap, newpolar.alpha, newpolar.cm)

        # test equality
        np.testing.assert_allclose(cl, cl_extrap, atol=1.5e-4)
        np.testing.assert_allclose(cd, cd_extrap, atol=1.5e-4)
        np.testing.assert_allclose(cm, cm_extrap, atol=5e-3)

    def test_extrap3(self):

        cdmax = 1.5
        newpolar = self.polar.extrapolate(cdmax)

        alpha_extrap = [-180, -170, -160, -150, -140, -130, -120, -110, -100,
                        -90, -80, -70, -60, -50, -40, -30, -20, -10.1, -8.2,
                        -6.1, -4.1, -2.1, 0.1, 2, 4.1, 6.2, 8.1, 10.2, 11.3,
                        12.1, 13.2, 14.2, 15.3, 16.3, 17.1, 18.1, 19.1, 20.1,
                        30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140,
                        150, 160, 170, 180]
        cl_extrap = [0.0000, 0.2299, 0.4597, 0.5266, 0.5608, 0.5429, 0.4685,
                     0.3434, 0.1810, 0.0000, -0.1810, -0.3434, -0.4685,
                     -0.5429, -0.5608, -0.5266, -0.4637, -0.6300, -0.5600,
                     -0.6400, -0.4200, -0.2100, 0.0500, 0.3000, 0.5400, 0.7900,
                     0.9000, 0.9300, 0.9200, 0.9500, 0.9900, 1.0100, 1.0200,
                     1.0000, 0.9400, 0.8500, 0.7000, 0.6600, 0.7523, 0.8012,
                     0.7756, 0.6693, 0.4906, 0.2586, 0.0000, -0.1810, -0.3434,
                     -0.4685, -0.5429, -0.5608, -0.5266, -0.4597, -0.2299,
                     0.0000]
        cd_extrap = [0.1506, 0.1936, 0.3170, 0.5054, 0.7351, 0.9771, 1.2003,
                     1.3760, 1.4809, 1.5000, 1.4809, 1.3760, 1.2003, 0.9771,
                     0.7351, 0.5054, 0.3158, 0.0390, 0.0233, 0.0131, 0.0134,
                     0.0119, 0.0122, 0.0116, 0.0144, 0.0146, 0.0162, 0.0274,
                     0.0303, 0.0369, 0.0509, 0.0648, 0.0776, 0.0917, 0.0994,
                     0.2306, 0.3142, 0.3186, 0.5054, 0.7351, 0.9771, 1.2003,
                     1.3760, 1.4809, 1.5000, 1.4809, 1.3760, 1.2003, 0.9771,
                     0.7351, 0.5054, 0.3170, 0.1936, 0.1506]
        cm_extrap = [0.0000, 0.4000, 0.2431, 0.2723, 0.3130, 0.3540, 0.3888,
                     0.4118, 0.4190, 0.4084, 0.3926, 0.3602, 0.3148, 0.2614,
                     0.2049, 0.1488, 0.0942, -0.0044, -0.0051, 0.0018, -0.0216,
                     -0.0282, -0.0346, -0.0405, -0.0455, -0.0507, -0.0404, -0.0321,
                     -0.0281, -0.0284, -0.0322, -0.0361, -0.0363, -0.0393, -0.0398,
                     -0.0983, -0.1242, -0.1155, -0.1807, -0.2399, -0.2925, -0.3370,
                     -0.3719, -0.3959, -0.4084, -0.4190, -0.4118, -0.3888, -0.3540,
                     -0.3130, -0.2723, -0.2431, -0.5000, 0.0000]

        # re-interpolate b/c angles of attack are different
        cl = np.interp(alpha_extrap, newpolar.alpha, newpolar.cl)
        cd = np.interp(alpha_extrap, newpolar.alpha, newpolar.cd)
        cm = np.interp(alpha_extrap, newpolar.alpha, newpolar.cm)

        # test equality
        np.testing.assert_allclose(cl, cl_extrap, atol=1.5e-4)
        np.testing.assert_allclose(cd, cd_extrap, atol=1.5e-4)
        np.testing.assert_allclose(cm, cm_extrap, atol=5e-3)

try:
    import pyXLIGHT
    XFOIL = True
except:
    XFOIL = False

if XFOIL:
    class TestCSTDirect(unittest.TestCase):

        def setUp(self):

            CST = [-0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25]
            afOptions = dict(GradientOptions=dict(ComputeGradient=True))
            self.afanalysis = AirfoilAnalysis(CST, afOptions=afOptions, airfoilShapeMethod='CST')

        def test_spline(self):

            cl_ref = [-1.23024178, -1.21825016, -1.18094464, -1.07685863, -0.9792709,  -0.87198992,
             -0.75449412, -0.63985787, -0.49969734, -0.39235473, -0.30570394, -0.23326203,
             -0.16649976, -0.0918822 , -0.01341187,  0.06378642,  0.13455735,  0.20387069,
              0.27812552,  0.34919867,  0.4231047 ,  0.50599124,  0.62896542,  0.76504956,
              0.8758961,   0.99166422,  1.09990807,  1.16355044,  1.18386944,  1.20966257]
            cd_ref = [ 0.03033943,  0.02563378,  0.02203706,  0.01915123,  0.01648923,  0.01434976,
              0.01239128,  0.01074939,  0.0093854,   0.00841966,  0.00775688,  0.00727748,
              0.00702595,  0.00681978,  0.00672038,  0.00667628,  0.00669575,  0.00684382,
              0.00712378,  0.00758174,  0.00812742,  0.00892655,  0.01015891,  0.01179022,
              0.01370868,  0.01584591,  0.01828074,  0.02094955,  0.02417505,  0.02840916]
            cm_ref = [ -5.67476481e-02,  -4.77804151e-02,  -4.11845627e-02,  -4.54226461e-02,
              -4.69882164e-02,  -4.91570574e-02,  -5.24714847e-02,  -5.44951539e-02,
              -6.16266876e-02,  -6.10848951e-02,  -5.55036263e-02,  -4.64455198e-02,
              -3.58389908e-02,  -2.68321663e-02,  -1.85592153e-02,  -9.98008230e-03,
               1.10405813e-05,   1.02193546e-02,   1.92183840e-02,   2.86356834e-02,
               3.71951574e-02,   4.33348345e-02,   4.01818693e-02,   3.37040034e-02,
               3.20618986e-02,   2.85362547e-02,  2.55293263e-02,   2.99443964e-02,
               4.12411409e-02,   4.93246875e-02]
            cl, cd, cm, alphas, failure = self.afanalysis.computeSpline()

            # test equality
            np.testing.assert_allclose(cl_ref, cl, atol=1.5e-4)
            np.testing.assert_allclose(cd_ref, cd, atol=1.5e-4)
            np.testing.assert_allclose(cm_ref, cm, atol=5e-3)

        def test_direct(self):

            cl_ref = [0.896876529956]
            cd_ref = [0.0140309272901]
            dcl_dalpha_ref = [7.08681392237]
            dcd_dalpha_ref = [0.0968851832505]
            dcl_dafShapeParams_ref = [ 0.241959,    0.91389795,  2.37720714,  1.05365745,  0.62995961,  0.40888163, -0.09767378, -0.08141224]
            dcd_dafShapeParams_ref = [ -0.01100373,  0.00518387,  0.01375961, -0.00569326, -0.00751298,  0.00302826,  0.02103896, 0.00705622]
            alpha, Re = 10.0*pi/180., 1e6
            cl, cd, dcl_dalpha, dcd_dalpha, dcl_dRe, dcd_dRe, dcl_dSafp, dcd_dSafp = self.afanalysis.computeDirect(alpha, Re)

            # test equality
            np.testing.assert_allclose(cl_ref, [cl], atol=1.5e-4)
            np.testing.assert_allclose(cd_ref, [cd], atol=1.5e-4)
            np.testing.assert_allclose(dcl_dalpha_ref, [dcl_dalpha], atol=1.5e-4)
            np.testing.assert_allclose(dcd_dalpha_ref, [dcd_dalpha], atol=1.5e-4)
            np.testing.assert_allclose(dcl_dafShapeParams_ref, dcl_dSafp, atol=1.5e-4)
            np.testing.assert_allclose(dcd_dafShapeParams_ref, dcd_dSafp, atol=1.5e-4)

        def test_cst_coordinates(self):
            x_ref = [  1.00000000e+00,   9.99753280e-01,   9.99013364e-01,   9.97780982e-01,9.96057351e-01,   9.93844170e-01,   9.91143625e-01,   9.87958381e-01, 9.84291581e-01,   9.80146843e-01,   9.75528258e-01,  9.70440384e-01,
               9.64888243e-01,   9.58877313e-01,   9.52413526e-01,   9.45503262e-01, 9.38153340e-01,   9.30371014e-01,   9.22163963e-01,   9.13540287e-01, 9.04508497e-01,   8.95077506e-01,   8.85256621e-01,   8.75055535e-01,
               8.64484314e-01,   8.53553391e-01,   8.42273553e-01,   8.30655933e-01, 8.18711995e-01,   8.06453527e-01,   7.93892626e-01,   7.81041689e-01, 7.67913397e-01,   7.54520708e-01,   7.40876837e-01,   7.26995250e-01,
               7.12889646e-01,   6.98573945e-01,  6.84062276e-01,   6.69368960e-01,  6.54508497e-01,   6.39495553e-01,   6.24344944e-01,   6.09071621e-01, 5.93690657e-01,   5.78217233e-01,   5.62666617e-01,   5.47054157e-01,
               5.31395260e-01,   5.15705380e-01,   5.00000000e-01,   4.84294620e-01, 4.68604740e-01,   4.52945843e-01,   4.37333383e-01,   4.21782767e-01, 4.06309343e-01,   3.90928379e-01,   3.75655056e-01,   3.60504447e-01,
               3.45491503e-01,   3.30631040e-01,   3.15937724e-01,   3.01426055e-01, 2.87110354e-01,   2.73004750e-01,   2.59123163e-01,   2.45479292e-01, 2.32086603e-01,   2.18958311e-01,   2.06107374e-01,   1.93546473e-01,
               1.81288005e-01,   1.69344067e-01,   1.57726447e-01,   1.46446609e-01, 1.35515686e-01,   1.24944465e-01,   1.14743379e-01,   1.04922494e-01, 9.54915028e-02,   8.64597129e-02,   7.78360372e-02,   6.96289865e-02,
               6.18466600e-02,   5.44967379e-02,   4.75864738e-02,   4.11226872e-02, 3.51117571e-02,   2.95596155e-02,   2.44717419e-02,   1.98531572e-02, 1.57084194e-02,   1.20416190e-02,   8.85637464e-03,   6.15582970e-03,
               3.94264934e-03,  2.21901770e-03 ,  9.86635786e-04,   2.46719817e-04,  0.00000000e+00,   2.46719817e-04,   9.86635786e-04,   2.21901770e-03, 3.94264934e-03,   6.15582970e-03,   8.85637464e-03,   1.20416190e-02,
               1.57084194e-02,   1.98531572e-02,   2.44717419e-02,   2.95596155e-02, 3.51117571e-02,   4.11226872e-02,   4.75864738e-02,   5.44967379e-02, 6.18466600e-02,   6.96289865e-02,   7.78360372e-02,   8.64597129e-02,
               9.54915028e-02,   1.04922494e-01,   1.14743379e-01,   1.24944465e-01, 1.35515686e-01,   1.46446609e-01,   1.57726447e-01,   1.69344067e-01, 1.81288005e-01,   1.93546473e-01,   2.06107374e-01,   2.18958311e-01,
               2.32086603e-01,   2.45479292e-01,   2.59123163e-01,   2.73004750e-01, 2.87110354e-01,   3.01426055e-01,   3.15937724e-01,   3.30631040e-01, 3.45491503e-01,   3.60504447e-01,   3.75655056e-01,   3.90928379e-01,
               4.06309343e-01,   4.21782767e-01,   4.37333383e-01,   4.52945843e-01, 4.68604740e-01,   4.84294620e-01,   5.00000000e-01,   5.15705380e-01, 5.31395260e-01,   5.47054157e-01,   5.62666617e-01,   5.78217233e-01,
               5.93690657e-01,   6.09071621e-01,   6.24344944e-01,   6.39495553e-01, 6.54508497e-01,   6.69368960e-01,   6.84062276e-01,   6.98573945e-01, 7.12889646e-01,   7.26995250e-01,   7.40876837e-01,   7.54520708e-01,
               7.67913397e-01,   7.81041689e-01,   7.93892626e-01,   8.06453527e-01, 8.18711995e-01,   8.30655933e-01,   8.42273553e-01,   8.53553391e-01, 8.64484314e-01,   8.75055535e-01,   8.85256621e-01,   8.95077506e-01,
               9.04508497e-01,   9.13540287e-01,   9.22163963e-01,   9.30371014e-01, 9.38153340e-01,   9.45503262e-01,   9.52413526e-01,   9.58877313e-01, 9.64888243e-01,   9.70440384e-01,   9.75528258e-01,   9.80146843e-01,
               9.84291581e-01,   9.87958381e-01,   9.91143625e-01,   9.93844170e-01, 9.96057351e-01,   9.97780982e-01,   9.99013364e-01,   1.00000000e+00]
            y_ref = [  0.00000000e+00,   2.46537235e-04,   5.54138578e-04,   9.83717356e-04, 1.53421333e-03,   2.20426743e-03,   2.99222479e-03,   3.89613846e-03, 4.91377382e-03,   6.04261353e-03,   7.27986323e-03,   8.62245783e-03,
               1.00670683e-02,   1.16101093e-02,   1.32477472e-02,   1.49759084e-02, 1.67902889e-02,   1.86863638e-02,   2.06593974e-02,   2.27044540e-02, 2.48164088e-02,   2.69899596e-02,   2.92196385e-02,   3.14998246e-02,
               3.38247563e-02,   3.61885441e-02,   3.85851845e-02,   4.10085728e-02, 4.34525175e-02,   4.59107537e-02,   4.83769574e-02,   5.08447600e-02, 5.33077623e-02,   5.57595491e-02,   5.81937038e-02,   6.06038224e-02,
               6.29835289e-02,   6.53264885e-02,   6.76264230e-02,   6.98771243e-02, 7.20724689e-02,   7.42064314e-02,   7.62730986e-02,   7.82666823e-02, 8.01815331e-02,   8.20121530e-02,   8.37532075e-02,   8.53995386e-02,
               8.69461757e-02,   8.83883476e-02,   8.97214932e-02,   9.09412718e-02, 9.20435732e-02,   9.30245275e-02,   9.38805133e-02,   9.46081669e-02, 9.52043895e-02,   9.56663550e-02,   9.59915160e-02,   9.61776105e-02,
               9.62226669e-02,   9.61250087e-02,   9.58832590e-02,   9.54963435e-02, 9.49634937e-02,   9.42842485e-02,   9.34584563e-02,   9.24862752e-02, 9.13681731e-02,   9.01049275e-02,   8.86976238e-02,   8.71476533e-02,
               8.54567108e-02,   8.36267912e-02,   8.16601853e-02,   7.95594753e-02, 7.73275296e-02,   7.49674967e-02,   7.24827987e-02,   6.98771243e-02, 6.71544208e-02,   6.43188860e-02,   6.13749592e-02,   5.83273121e-02,
               5.51808383e-02,   5.19406434e-02,   4.86120342e-02,   4.52005068e-02, 4.17117355e-02,   3.81515603e-02,   3.45259744e-02,   3.08411116e-02, 2.71032331e-02,   2.33187137e-02,   1.94940287e-02,   1.56357396e-02,
               1.17504802e-02,   7.84494202e-03,   3.92586050e-03,   0.00000000e+00,-3.92586050e-03,  -7.84494202e-03,  -1.17504802e-02,  -1.56357396e-02,-1.94940287e-02,  -2.33187137e-02,  -2.71032331e-02,  -3.08411116e-02,
              -3.45259744e-02,  -3.81515603e-02,  -4.17117355e-02,  -4.52005068e-02,-4.86120342e-02,  -5.19406434e-02,  -5.51808383e-02,  -5.83273121e-02,-6.13749592e-02,  -6.43188860e-02,  -6.71544208e-02,  -6.98771243e-02,
              -7.24827987e-02,  -7.49674967e-02,  -7.73275296e-02,  -7.95594753e-02,-8.16601853e-02,  -8.36267912e-02,  -8.54567108e-02,  -8.71476533e-02,-8.86976238e-02,  -9.01049275e-02,  -9.13681731e-02,  -9.24862752e-02,
              -9.34584563e-02,  -9.42842485e-02,  -9.49634937e-02,  -9.54963435e-02,-9.58832590e-02,  -9.61250087e-02,  -9.62226669e-02,  -9.61776105e-02,-9.59915160e-02,  -9.56663550e-02,  -9.52043895e-02,  -9.46081669e-02,
              -9.38805133e-02,  -9.30245275e-02,  -9.20435732e-02,  -9.09412718e-02,-8.97214932e-02,  -8.83883476e-02,  -8.69461757e-02,  -8.53995386e-02,-8.37532075e-02,  -8.20121530e-02,  -8.01815331e-02,  -7.82666823e-02,
              -7.62730986e-02,  -7.42064314e-02,  -7.20724689e-02,  -6.98771243e-02,-6.76264230e-02,  -6.53264885e-02,  -6.29835289e-02,  -6.06038224e-02,-5.81937038e-02,  -5.57595491e-02,  -5.33077623e-02,  -5.08447600e-02,
              -4.83769574e-02,  -4.59107537e-02,  -4.34525175e-02,  -4.10085728e-02,-3.85851845e-02,  -3.61885441e-02,  -3.38247563e-02,  -3.14998246e-02,-2.92196385e-02,  -2.69899596e-02,  -2.48164088e-02,  -2.27044540e-02,
              -2.06593974e-02,  -1.86863638e-02,  -1.67902889e-02,  -1.49759084e-02,-1.32477472e-02,  -1.16101093e-02,  -1.00670683e-02,  -8.62245783e-03,-7.27986323e-03,  -6.04261353e-03,  -4.91377382e-03,  -3.89613846e-03,
              -2.99222479e-03,  -2.20426743e-03,  -1.53421333e-03,  -9.83717356e-04,-5.54138578e-04,  -2.46537235e-04,  -6.16723450e-05,  -0.00000000e+00]
            x, y = self.afanalysis.getCoordinates()

            # test equality
            np.testing.assert_allclose(x, x_ref, atol=1.5e-4)
            np.testing.assert_allclose(y, y_ref, atol=1.5e-4)

    class TestPrecomp(unittest.TestCase):

        def setUp(self):
            import os
            basepath = os.path.join(os.path.dirname(os.path.realpath(__file__)), '../test/5MW_AFFiles/')
            baseAirfoilsCoordindates0 = [0]*5
            baseAirfoilsCoordindates0[0] = os.path.join(basepath, 'DU40.dat')
            baseAirfoilsCoordindates0[1] = os.path.join(basepath, 'DU35.dat')
            baseAirfoilsCoordindates0[2] = os.path.join(basepath, 'DU30.dat')
            baseAirfoilsCoordindates0[3] = os.path.join(basepath, 'DU25.dat')
            baseAirfoilsCoordindates0[4] = os.path.join(basepath, 'DU21.dat')
            # Corresponding to blended airfoil family factor of 1.0
            baseAirfoilsCoordindates1 = [0]*1
            baseAirfoilsCoordindates1[0] = os.path.join(basepath, 'NACA64.dat')
            afOptions = dict(PrecomputationalOptions=dict())
            afOptions['PrecomputationalOptions']['BaseAirfoilsCoordinates0'] = baseAirfoilsCoordindates0
            afOptions['PrecomputationalOptions']['BaseAirfoilsCoordinates1'] = baseAirfoilsCoordindates1
            self.afanalysis_precomp = AirfoilAnalysis([0.25, 0.0], afOptions=afOptions, airfoilShapeMethod='Precomputational')

        def test_spline(self):
            cl_ref = [-1.03613992, -1.03198382, -0.99003737, -0.90419183, -0.77171933, -0.69940876,
             -0.65369824, -0.54155569, -0.41490887, -0.2899219 , -0.16376129, -0.03709794,
              0.08930396,  0.21395453,  0.33981185,  0.46423274,  0.58574559,  0.70738667,
              0.82720021,  0.94260552,  1.05604936,  1.15849303,  1.25099881,  1.3339478,
              1.39512821,  1.38659622,  1.33875894,  1.32872109,  1.34197797,  1.35523955]
            cd_ref = [ 0.0528501 ,  0.04027622,  0.03021416,  0.02301408,  0.01813481,  0.01456875,
              0.01199188,  0.0104449 ,  0.00965686,  0.00933352,  0.00897093,  0.0087894,
              0.00869825,  0.00869449,  0.00868876,  0.00873328,  0.00895221,  0.00908709,
              0.00934637,  0.0097088 ,  0.01005823,  0.01053732,  0.01114522,  0.01218023,
              0.01381296,  0.01880683,  0.02828651,  0.03789725,  0.04731038,  0.05749888]
            cl, cd, cm, alphas, failure = self.afanalysis_precomp.computeSpline()

            # test equality
            np.testing.assert_allclose(cl_ref, cl, atol=1.5e-4)
            np.testing.assert_allclose(cd_ref, cd, atol=1.5e-4)

        def test_direct(self):

            cl_ref = [1.39958408167]
            cd_ref = [0.0142509728795]

            alpha, Re = 10.0*pi/180., 1e6
            cl, cd = self.afanalysis_precomp.computeDirect(alpha, Re)

            # test equality
            np.testing.assert_allclose(cl_ref, [cl], atol=1.5e-4)
            np.testing.assert_allclose(cd_ref, [cd], atol=1.5e-4)


        def test_precomp_coordinates(self):
            x_ref = np.asarray([  1.00000000e+00,   9.99753000e-01,   9.99013000e-01,   9.97781000e-01,  9.96057000e-01,   9.93844000e-01,   9.91144000e-01,   9.87958000e-01, 9.84292000e-01,   9.80147000e-01,   9.75528000e-01,   9.70440000e-01,
               9.64888000e-01,   9.58877000e-01,   9.52414000e-01,   9.45503000e-01, 9.38153000e-01,   9.30371000e-01,   9.22164000e-01,   9.13540000e-01, 9.04508000e-01,   8.95078000e-01,   8.85257000e-01,   8.75056000e-01,
               8.64484000e-01,   8.53553000e-01,   8.42274000e-01,   8.30656000e-01, 8.18712000e-01,   8.06454000e-01,   7.93893000e-01,   7.81042000e-01, 7.67913000e-01,   7.54521000e-01,   7.40877000e-01,   7.26995000e-01,
               7.12890000e-01,   6.98574000e-01,   6.84062000e-01,   6.69369000e-01, 6.54508000e-01,   6.39496000e-01,   6.24345000e-01,   6.09072000e-01, 5.93691000e-01,   5.78217000e-01,   5.62667000e-01,   5.47054000e-01,
               5.31395000e-01,   5.15705000e-01,   5.00000000e-01,   4.84295000e-01, 4.68605000e-01,  4.52946000e-01 ,  4.37333000e-01 ,  4.21783000e-01, 4.06309000e-01,   3.90928000e-01,   3.75655000e-01,   3.60504000e-01,
               3.45492000e-01,   3.30631000e-01,   3.15938000e-01,   3.01426000e-01, 2.87110000e-01,  2.73005000e-01 ,  2.59123000e-01 ,  2.45479000e-01, 2.32087000e-01,  2.18958000e-01 ,  2.06107000e-01 ,  1.93546000e-01,
               1.81288000e-01,  1.69344000e-01 ,  1.57726000e-01 ,  1.46447000e-01, 1.35516000e-01,  1.24944000e-01 ,  1.14743000e-01 ,  1.04922000e-01, 9.54920000e-02,   8.64600000e-02,   7.78360000e-02,   6.96290000e-02,
               6.18470000e-02,   5.44970000e-02,   4.75860000e-02,   4.11230000e-02, 3.51120000e-02,   2.95600000e-02,   2.44720000e-02,   1.98530000e-02, 1.57080000e-02,   1.20420000e-02,   8.85600000e-03,   6.15600000e-03,
               3.94300000e-03,   2.21900000e-03,   9.87000000e-04,   2.47000000e-04, 0.00000000e+00,   2.47000000e-04,   9.87000000e-04,   2.21900000e-03, 3.94300000e-03,   6.15600000e-03,   8.85600000e-03 ,  1.20420000e-02,
               1.57080000e-02,   1.98530000e-02,   2.44720000e-02,   2.95600000e-02, 3.51120000e-02,   4.11230000e-02,   4.75860000e-02,   5.44970000e-02, 6.18470000e-02,   6.96290000e-02,   7.78360000e-02,   8.64600000e-02,
               9.54920000e-02,   1.04922000e-01,   1.14743000e-01,   1.24944000e-01, 1.35516000e-01,   1.46447000e-01,   1.57726000e-01,  1.69344000e-01, 1.81288000e-01,   1.93546000e-01,   2.06107000e-01,   2.18958000e-01,
               2.32087000e-01,  2.45479000e-01 ,  2.59123000e-01 ,  2.73005000e-01, 2.87110000e-01,   3.01426000e-01,   3.15938000e-01,   3.30631000e-01, 3.45492000e-01,   3.60504000e-01,   3.75655000e-01,   3.90928000e-01,
               4.06309000e-01,   4.21783000e-01,   4.37333000e-01,   4.52946000e-01, 4.68605000e-01,   4.84295000e-01,   5.00000000e-01,   5.15705000e-01, 5.31395000e-01,   5.47054000e-01,   5.62667000e-01,   5.78217000e-01,
               5.93691000e-01,   6.09072000e-01,   6.24345000e-01,   6.39496000e-01, 6.54508000e-01,   6.69369000e-01,   6.84062000e-01,   6.98574000e-01, 7.12890000e-01,   7.26995000e-01,   7.40877000e-01,   7.54521000e-01,
               7.67913000e-01,   7.81042000e-01,   7.93893000e-01,   8.06454000e-01, 8.18712000e-01,   8.30656000e-01,   8.42274000e-01,   8.53553000e-01, 8.64484000e-01,   8.75056000e-01,   8.85257000e-01,   8.95078000e-01,
               9.04508000e-01,   9.13540000e-01,   9.22164000e-01,   9.30371000e-01, 9.38153000e-01,   9.45503000e-01,   9.52414000e-01,   9.58877000e-01, 9.64888000e-01,   9.70440000e-01,   9.75528000e-01,   9.80147000e-01,
               9.84292000e-01,   9.87958000e-01,   9.91144000e-01,   9.93844000e-01, 9.96057000e-01,   9.97781000e-01,   9.99013000e-01,   1.00000000e+00])
            y_ref = np.asarray([  0.00000000e+00,   3.44298837e-04,   7.73785016e-04,   1.37364588e-03, 2.14269826e-03,   3.07857586e-03,   4.17772919e-03,   5.43897510e-03, 6.85876412e-03,   8.43472993e-03,   1.01621399e-02,   1.20362614e-02,
               1.40547281e-02,   1.62128074e-02,   1.85057667e-02,   2.09288733e-02, 2.34773946e-02,   2.61477811e-02,   2.89353002e-02,   3.18340361e-02,  3.48380731e-02,   3.79450447e-02,   4.11466689e-02,   4.44405795e-02,
               4.78184942e-02,   5.12768636e-02,   5.48085888e-02,   5.84065708e-02, 6.20648938e-02,   6.57776421e-02,   6.95341672e-02,   7.33297365e-02,  7.71537016e-02,   8.09965972e-02,   8.48501413e-02,   8.87036853e-02,
               9.25442146e-02,   9.63622639e-02,   1.00144818e-01,   1.03878864e-01, 1.07550201e-01,   1.11145817e-01,   1.14651513e-01,   1.18050724e-01,  1.21330437e-01,   1.24472903e-01,   1.27465109e-01,   1.30290489e-01,
               1.32933663e-01,   1.35380432e-01,   1.37615417e-01,   1.39625602e-01, 1.41399155e-01,   1.42921878e-01,   1.44184308e-01,   1.45175794e-01,  1.45886871e-01,   1.46312808e-01,   1.46446505e-01,   1.46283229e-01,
               1.45822981e-01,   1.45063394e-01,   1.44006834e-01,   1.42656851e-01, 1.41015812e-01,   1.39091998e-01,   1.36893691e-01,   1.34430357e-01,  1.31713827e-01,   1.28755934e-01,   1.25572057e-01,   1.22175211e-01,
               1.18583145e-01,   1.14811239e-01,   1.10877240e-01,   1.06798896e-01, 1.02592771e-01,   9.82789791e-02,   9.38729005e-02,   8.93910998e-02,  8.48501413e-02,   8.02665891e-02,   7.56534579e-02,  7.10237625e-02,
               6.63905177e-02,   6.17631887e-02,   5.71512407e-02,   5.25629558e-02, 4.80030667e-02,   4.34763061e-02,   3.89862233e-02,   3.45340016e-02,  3.01184577e-02,   2.57395918e-02,   2.13926710e-02,   1.70765124e-02,
               1.27852001e-02,   8.51163517e-03,   4.25226811e-03,   0.00000000e+00, -3.64294199e-03,  -7.28706714e-03,  -1.09335586e-02,  -1.45835995e-02, -1.82383731e-02,  -2.18978793e-02,  -2.55597518e-02,  -2.92263570e-02,
              -3.28929621e-02,  -3.65595672e-02,  -4.02214398e-02,  -4.38750302e-02, -4.75144227e-02,  -5.11337015e-02,  -5.47257678e-02,  -5.82835224e-02, -6.17963171e-02,  -6.52558696e-02,  -6.86491654e-02,  -7.19667391e-02,
              -7.51943928e-02,  -7.83202949e-02,  -8.13302477e-02,  -8.42100531e-02, -8.69455132e-02,  -8.95224303e-02,  -9.19266064e-02,  -9.41426604e-02, -9.61563945e-02,  -9.79547939e-02,  -9.95260271e-02,  -1.00854713e-01,
              -1.01931386e-01,  -1.02746582e-01,  -1.03289651e-01,  -1.03553495e-01, -1.03532198e-01,  -1.03221028e-01,  -1.02617618e-01,  -1.01720784e-01, -1.00531711e-01,  -9.90527641e-02,  -9.72898594e-02,  -9.52489127e-02,
              -9.29393892e-02,  -9.03731206e-02,  -8.75619383e-02,  -8.45212235e-02, -8.12675403e-02,  -7.78198193e-02,  -7.41969910e-02,  -7.04203522e-02, -6.65123829e-02,  -6.24967463e-02,  -5.83971055e-02,  -5.42406732e-02,
              -5.00499292e-02,  -4.58520864e-02,  -4.16708077e-02,  -3.75333059e-02, -3.34632440e-02,  -2.94842853e-02,  -2.56189097e-02,  -2.18884140e-02, -1.83140952e-02,  -1.49125173e-02,  -1.17014278e-02,  -8.69502459e-03,
              -5.90632232e-03,  -3.34478630e-03,  -1.01751546e-03,   1.06957439e-03, 2.91175065e-03,   4.51137961e-03,   5.86846128e-03,   6.98654513e-03, 7.87509643e-03,   8.54003095e-03,   8.99436344e-03,   9.24992546e-03,
               9.32091491e-03,   9.22389600e-03,   8.97543292e-03,   8.59563935e-03, 8.10344583e-03,   7.51778286e-03,   6.85994728e-03,   6.15123593e-03, 5.40939616e-03,   4.65572483e-03,   3.91033559e-03,   3.18860951e-03,
               2.50947709e-03,   1.88713624e-03,   1.33696799e-03,   8.69620774e-04, 4.94559842e-04,   2.22433613e-04,   5.56084033e-05,   0.00000000e+00])
            x, y = self.afanalysis_precomp.getCoordinates([0.25, 0.0])

            # test equality
            np.testing.assert_allclose(x, x_ref, atol=1.5e-4)
            np.testing.assert_allclose(y, y_ref, atol=1.5e-4)

@unittest.skip("CFD test takes a long time")
class TestCFD(unittest.TestCase):

    def setUp(self):

        CST = []
        afOptions = dict(AnalysisMethod='CFD')
        self.afanalysis = AirfoilAnalysis(CST, afOptions)

    def test_spline(self):
        cl_ref = []
        cd_ref = []
        cm_ref = []

        cl, cd, cm, alphas, failure = self.afanalysis.computeSpline()

        # test equality
        np.testing.assert_allclose(cl_ref, cl, atol=1.5e-4)
        np.testing.assert_allclose(cd_ref, cd, atol=1.5e-4)
        np.testing.assert_allclose(cm_ref, cm, atol=5e-3)

    def test_direct(self):

        cl_ref = 0.
        cd_ref = 0.

        alpha, Re = 10.0*pi/180., 1e6
        cl, cd = self.afanalysis.computeDirect(alpha, Re)

        # test equality
        np.testing.assert_allclose(cl_ref, cl, atol=1.5e-4)
        np.testing.assert_allclose(cd_ref, cd, atol=1.5e-4)


# class TestSpline(unittest.TestCase):

#     def setUp(self):


#         Re = 1.0
#         alpha = [1.0, 2.0, 3.0, 4.0, 5.0]
#         cl = [0.1, 0.2, 0.3, 0.4, 0.5]
#         cd = [0.001, 0.002, 0.003, 0.004, 0.005]

#         self.p1 = Polar(Re, alpha, cl, cd)


#         Re = 2.0
#         alpha = [1.0, 2.0, 3.0, 4.0, 5.0]
#         cl = [0.12, 0.22, 0.32, 0.42, 0.52]
#         cd = [0.0012, 0.0022, 0.0032, 0.0042, 0.0052]

#         self.p2 = Polar(Re, alpha, cl, cd)


#     def test_spline1(self):
#         af = Airfoil([self.p1, self.p2])

#         cl, cd, cm = af.evaluate(1.5, 1.0)

#         self.assertAlmostEqual(cl, 0.15)
#         self.assertAlmostEqual(cd, 0.0015)

#         cl, cd, cm = af.evaluate(1.5, 1.5)

#         self.assertAlmostEqual(cl, 0.16)
#         self.assertAlmostEqual(cd, 0.0016)


if __name__ == '__main__':
    unittest.main()
